name: Django CI

on: 
    push:
        branches: ['main']
    pull_request:
        branches: ['main']


jobs: 
    my_ci:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [ 3.12.3 ]
        steps:
            # Actions от github: проверяет репозиторий, гит и т.д.
            - uses : actions/checkout@v4

            # Устанавливает питон нужной версии (можно в матрице установить несколько версий )
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v3
              with:
                python-version: ${{ matrix.python-version }}
            
            # Загружает все зависимости с проекта 
            - name: Install dependens
              run: | 
                python -m pip install --upgrade pip 
                pip install -r requirements.txt
            
            #  # Проверяет код на питоне 
            # - name: lint on code 
            #   run: |
            #       pip install flake8
            #       flake8 .

            #  Выполняется скрипт (но можно сделать другую логику)
            - name: Run a script 
              run: echo Hello, word 
              
            - name: Run two scripts 
              run: |
                echo Artem hello in project! 
            # - name: Run tests
            #   run: pytest tests/test.py
    deploy: 
        needs: my_ci
        runs-on: ubuntu:latest
        strategy: 
          matrix: 
            python-version: [3.12.3]
        steps:
            - name: Checkout code 
              uses : actions/checkout@v4

            - name: Install Python 
              uses: actions/setup-python@v3
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install dependens
              run: | 
                python -m pip install --upgrade pip 
                pip install -r requirements.txt

            - name: Connect on remote server 
              uses: D3rHase/ssh-command-action@v0.2.2
              with: 
                host: ${{ secrets.SSH_HOST }}
                user: ${{ secrets.SSH_USER}}
                private_key: ${{ secrets.SSH_PRIVATE_KEY}}
                command: |
                    cd ${{ secrets.PROJECT_FOLDER }}; 
                    git checkout main; 
                    git pull; 
                    docker compose down ;
                    docker compose up -d; 

          



